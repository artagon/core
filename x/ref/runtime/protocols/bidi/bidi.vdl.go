// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: bidi

//nolint:golint
package bidi

import (
	"v.io/v23/context"
	"v.io/v23/i18n"
	"v.io/v23/verror"
)

var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

//////////////////////////////////////////////////
// Error definitions

var (
	ErrCannotListenOnBidi     = verror.NewIDAction("v.io/x/ref/runtime/protocols/bidi.CannotListenOnBidi", verror.NoRetry)
	ErrBidiRoutingIdNotCached = verror.NewIDAction("v.io/x/ref/runtime/protocols/bidi.BidiRoutingIdNotCached", verror.NoRetry)
)

// NewErrCannotListenOnBidi returns an error with the ErrCannotListenOnBidi ID.
// WARNING: this function is deprecated and will be removed in the future,
// use ErrorfCannotListenOnBidi or MessageCannotListenOnBidi instead.
func NewErrCannotListenOnBidi(ctx *context.T) error {
	return verror.New(ErrCannotListenOnBidi, ctx)
}

// ErrorfCannotListenOnBidi calls ErrCannotListenOnBidi.Errorf with the supplied arguments.
func ErrorfCannotListenOnBidi(ctx *context.T, format string) error {
	return ErrCannotListenOnBidi.Errorf(ctx, format)
}

// MessageCannotListenOnBidi calls ErrCannotListenOnBidi.Message with the supplied arguments.
func MessageCannotListenOnBidi(ctx *context.T, message string) error {
	return ErrCannotListenOnBidi.Message(ctx, message)
}

// NewErrBidiRoutingIdNotCached returns an error with the ErrBidiRoutingIdNotCached ID.
// WARNING: this function is deprecated and will be removed in the future,
// use ErrorfBidiRoutingIdNotCached or MessageBidiRoutingIdNotCached instead.
func NewErrBidiRoutingIdNotCached(ctx *context.T) error {
	return verror.New(ErrBidiRoutingIdNotCached, ctx)
}

// ErrorfBidiRoutingIdNotCached calls ErrBidiRoutingIdNotCached.Errorf with the supplied arguments.
func ErrorfBidiRoutingIdNotCached(ctx *context.T, format string) error {
	return ErrBidiRoutingIdNotCached.Errorf(ctx, format)
}

// MessageBidiRoutingIdNotCached calls ErrBidiRoutingIdNotCached.Message with the supplied arguments.
func MessageBidiRoutingIdNotCached(ctx *context.T, message string) error {
	return ErrBidiRoutingIdNotCached.Message(ctx, message)
}

var initializeVDLCalled bool

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	// Set error format strings.
	i18n.Cat().SetWithBase(i18n.LangID("en"), i18n.MsgID(ErrCannotListenOnBidi.ID), "{1:}{2:} cannot listen on bidi protocol")
	i18n.Cat().SetWithBase(i18n.LangID("en"), i18n.MsgID(ErrBidiRoutingIdNotCached.ID), "{1:}{2:} bidi routing id not in cache")

	return struct{}{}
}
