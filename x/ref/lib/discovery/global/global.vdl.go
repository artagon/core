// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: global

//nolint:golint
package global

import (
	"v.io/v23/context"
	"v.io/v23/i18n"
	"v.io/v23/verror"
)

var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

//////////////////////////////////////////////////
// Error definitions

var (
	ErrNoNamespace       = verror.NewIDAction("v.io/x/ref/lib/discovery/global.NoNamespace", verror.NoRetry)
	ErrAdInvalidEncoding = verror.NewIDAction("v.io/x/ref/lib/discovery/global.AdInvalidEncoding", verror.NoRetry)
)

// NewErrNoNamespace returns an error with the ErrNoNamespace ID.
// WARNING: this function is deprecated and will be removed in the future,
// use ErrorfNoNamespace or MessageNoNamespace instead.
func NewErrNoNamespace(ctx *context.T) error {
	return verror.New(ErrNoNamespace, ctx)
}

// ErrorfNoNamespace calls ErrNoNamespace.Errorf with the supplied arguments.
func ErrorfNoNamespace(ctx *context.T, format string) error {
	return ErrNoNamespace.Errorf(ctx, format)
}

// MessageNoNamespace calls ErrNoNamespace.Message with the supplied arguments.
func MessageNoNamespace(ctx *context.T, message string) error {
	return ErrNoNamespace.Message(ctx, message)
}

// NewErrAdInvalidEncoding returns an error with the ErrAdInvalidEncoding ID.
// WARNING: this function is deprecated and will be removed in the future,
// use ErrorfAdInvalidEncoding or MessageAdInvalidEncoding instead.
func NewErrAdInvalidEncoding(ctx *context.T, ad string) error {
	return verror.New(ErrAdInvalidEncoding, ctx, ad)
}

// ErrorfAdInvalidEncoding calls ErrAdInvalidEncoding.Errorf with the supplied arguments.
func ErrorfAdInvalidEncoding(ctx *context.T, format string, ad string) error {
	return ErrAdInvalidEncoding.Errorf(ctx, format, ad)
}

// MessageAdInvalidEncoding calls ErrAdInvalidEncoding.Message with the supplied arguments.
func MessageAdInvalidEncoding(ctx *context.T, message string, ad string) error {
	return ErrAdInvalidEncoding.Message(ctx, message, ad)
}

var initializeVDLCalled bool

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	// Set error format strings.
	i18n.Cat().SetWithBase(i18n.LangID("en"), i18n.MsgID(ErrNoNamespace.ID), "{1:}{2:} namespace not found")
	i18n.Cat().SetWithBase(i18n.LangID("en"), i18n.MsgID(ErrAdInvalidEncoding.ID), "{1:}{2:} ad ({3}) has invalid encoding")

	return struct{}{}
}
